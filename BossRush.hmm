Code "Gamemode Battle Rush" 
//
    using System.Numerics;
    using System.Collections.Generic;
    using System.IO;
	#import "Services"
	#include "Reflection" noemit
    #load "WindowsBase.dll"
    #load "PresentationCore.dll"
    #load "System.Numerics.dll"
	#lib "Reflection"
	#lib "BlackboardStatus"
    #lib "HMM"
	#lib "INI"
	#lib "GameMode"
//

bool gameModeMasterKing = GameMode.GetName() == "GameModeBossRush"
if (gameModeMasterKing)
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");

	if ((LevelInfo.GetCurrentStageID() == "w1r03" || LevelInfo.GetCurrentStageID() == "w2r01" || LevelInfo.GetCurrentStageID() == "w3r01"))
	{
		if (IS_WORLD_FLAG(IsBattle) && BlackboardStatus.IsSuper())
		{
			if (SonicParametersInfo.pData == null)
				return;
			{
				RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.quickCyloop.transitExistTarget[2], SonicParameters.Action.Smash);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.attributes, 164);
				RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.attributes, 164);
			}
		}
	}
};

Code "BossRush_Combat"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossRushParameter"
    #lib "HMM"
	#lib "INI"
    #import "Services"

    static bool IsConfigInitialised = false;
	static int BossHP = 0;
    static bool healthBool = false;
//
{
    if (!IsConfigInitialised)
    {
		var mod = HMM.GetModByID("H1661727NB");

		if (mod == null)
			return;

		string modConfigIniPath = System.IO.Path.Combine(mod.Path, "mod.ini");
		var ini = INI.Read(modConfigIniPath);

		BossHP = INI.Parse<int>(ini["Main"]["BossCombat"], BossHP);
        IsConfigInitialised = true;

        if (BossHP == 1)
        {
            healthBool = true;
        }
        else
        {
            healthBool = false;
        }
    }
	
	if (!healthBool)
		return;

	var BossRushParameterInfo = Reflection.GetDataInfo<BossRushParameter.Root>("bossrush");

	if (BossRushParameterInfo.pData == null)
		return;

	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[0].healthPoint, 62500);
	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[1].healthPoint, 66500);
	RFL_SET_PARAM(BossRushParameterInfo, element[0].stages[2].healthPoint, 67000);

	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[0].healthPoint, 50000);
	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[1].healthPoint, 55000);
	RFL_SET_PARAM(BossRushParameterInfo, element[1].stages[2].healthPoint, 57000);

	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[0].healthPoint, 40000);
	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[1].healthPoint, 42000);
	RFL_SET_PARAM(BossRushParameterInfo, element[2].stages[2].healthPoint, 44000);

	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[0].healthPoint, 33000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[1].healthPoint, 36700);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[0].stages[2].healthPoint, 37500);

	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[0].healthPoint, 25000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[1].healthPoint, 27500);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[1].stages[2].healthPoint, 28300);
	
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[0].healthPoint, 15000);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[1].healthPoint, 17500);
	RFL_SET_PARAM(BossRushParameterInfo, elementEasy[2].stages[2].healthPoint, 18300);
}

Library "BossRushParameter"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossRushStageParameter
    {
        [FieldOffset(0x00)] public uint hour;
        [FieldOffset(0x04)] public uint minute;
        [FieldOffset(0x08)] public uint healthPoint;
        [FieldOffset(0x0C)] public uint recoveryRing;
        [FieldOffset(0x10)] public byte powerLevel;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct BossRushParameterElement
    {
        [FieldOffset(0x00)] public int applicableFailedCount;
        [FieldOffset(0x04)] public unsafe fixed byte /* BossRushStageParameter[3] */ _stages[60];

        public unsafe BossRushStageParameter* stages
        {
            get
            {
                fixed (byte* p_stages = _stages)
                    return (BossRushStageParameter*)p_stages;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1B0)]
    public struct Root
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossRushParameterElement[3] */ _element[192];

        public unsafe BossRushParameterElement* element
        {
            get
            {
                fixed (byte* p_element = _element)
                    return (BossRushParameterElement*)p_element;
            }
        }

        [FieldOffset(0xC0)] public unsafe fixed byte /* BossRushParameterElement[3] */ _elementEasy[192];

        public unsafe BossRushParameterElement* elementEasy
        {
            get
            {
                fixed (byte* p_elementEasy = _elementEasy)
                    return (BossRushParameterElement*)p_elementEasy;
            }
        }

        [FieldOffset(0x180)] public uint defaultRing;
        [FieldOffset(0x184)] public uint defaultRingEasy;
        [FieldOffset(0x188)] public float defaultCyloopGauge;
        [FieldOffset(0x18C)] public float readyTime;
        [FieldOffset(0x190)] public float clearTime;
        [FieldOffset(0x194)] public float failedTime;
        [FieldOffset(0x198)] public float clearWaitTime;
        [FieldOffset(0x19C)] public float failedWaitTime;
        [FieldOffset(0x1A0)] public float kodamaOrdinaryTextTime;
        [FieldOffset(0x1A4)] public float kodamaFightDelayTime;
        [FieldOffset(0x1A8)] public float kodamaFightTextTime;
        [FieldOffset(0x1AC)] public float kodamaSplendidTextTime;
    }

}
