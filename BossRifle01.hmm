Code "Supreme Counter_Blow (Final Horizons)" by "Holoska"
//
    using System.Numerics;
    using System.Collections.Generic;
    using System.IO;
	#import "Services"
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BlackboardStatus"
    #lib "HMM"
	#lib "INI"
    #load "WindowsBase.dll"
    #load "PresentationCore.dll"
    #load "System.Numerics.dll"
	
    static long Address = 0;
	static string[] qte_L = new[]
	
	{ /* sup */ "attack_counter_righthand_01", "attack_counter_righthand_01", "attack_counter_righthand_01", "attack_counter_righthand_01", "attack_counter_righthand_02", "attack_counter_righthand_02", "attack_counter_righthand_02", "attack_counter_righthand_03", "attack_counter_righthand_03", "attack_counter_righthand_03" };
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if ((LevelInfo.GetCurrentStageID() == "w1r04") || (LevelInfo.GetCurrentStageID() == "w1r06"))
	{
		if (Address == 0)
		{/* 0x14144FCF8 */ Address = ScanSignature ("attack_counter_righthand_01", "xxxxxxxxxxxxxxxxxxxxxxxxxxx");}
		
		else
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes(qte_L[new Random().Next(0, qte_L.Length)])); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("attack_counter_righthand_01")); }
}

Code "Shoot01 Phase Switch" by "Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		if (Address == 0)
		{ /* 0x14125C840 */ Address = ScanSignature ("zev_rfl_laser01", "xxxxxxxxxxxxxxx"); }
		
		bool isPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo4141") == 1;
		if (isPhase2)
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_shoot01")); }
	}
	else
	{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_laser01")); }
}

Code "Shoot02 RNG" by "Holoska"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
	static string[] qte_L = new[]
	
	{ /* sup */ "zev_rfl_shoot02", "zev_rfl_shoot02", "zev_rfl_shoot02", "zev_rfl_spQTE02", "zev_rfl_spQTE02", "zev_rfl_spQTE02" };
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		if (Address == 0)
		{ /* 0x14125C830 */ Address = ScanSignature ("zev_rfl_shoot02", "xxxxxxxxxxxxxxx"); }
		else
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes(qte_L[new Random().Next(0, qte_L.Length)])); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_shoot02")); }
}

Code "No Winglaser for w1r04" by "Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if (LevelInfo.GetCurrentStageID() == "w1r04")
	{
		if (Address == 0)
		{ /* 0x141461F00 */ Address = ScanSignature ("zev_rfl_sp01\x00\x00\x00", "xxxxxxxxxxxxxxx"); }
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_shoot01")); }
	}
	else
	{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_sp01\x00\x00\x00")); }
}

Code "Zev_Sp02 Phase Switch" by "Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
//
{
	string currentStage = LevelInfo.GetCurrentStageID();

	if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		if (Address == 0)
		{ /* 0x14125C830 */ Address = ScanSignature ("zev_rfl_sp02\x00\x00\x00", "xxxxxxxxxxxxxxx"); }
		
		bool isPhase1 = Lua.Call<int>("IsPlayingDiEvent", "bo4110") == 1;
		if (isPhase1)
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_spQTE01")); }
		
		bool isPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo4141") == 1;
		if (isPhase2)
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_sp02\x00\x00\x00")); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_sp02\x00\x00\x00")); }
}

Code "Bitlaser RNG w1r04" by "Holoska and Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
	static string[] qte_L = new[]
	
	{ /* sup */ "zev_rfl_bitlaser00", "zev_rfl_bitlaser00", "zev_rfl_bitlaser01", "zev_rfl_bitlaser01", "zev_rfl_bitlaser02", "zev_rfl_bitlaser02",};
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if (LevelInfo.GetCurrentStageID() == "w1r04")
	{
		if (Address == 0)
		{ 
			/* 0x14125CA48 */ Address = ScanSignature
			("zev_rfl_bitlaser02", "xxxxxxxxxxxxxxxxxx");
		}
		else
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes(qte_L[new Random().Next(0, qte_L.Length)])); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_bitlaser02")); }
}

Code "Bitlaser Phase Switch w1r06" by "Holoska and Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
	if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		if (Address == 0)
		{ /* 0x14125CA48 */ Address = ScanSignature ("zev_rfl_bitlaser02", "xxxxxxxxxxxxxxxxxx"); }

		bool isPhase1 = Lua.Call<int>("IsPlayingDiEvent", "bo4110") == 1;
		if (isPhase1)
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_bitlaser00")); }

		bool isPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo4140") == 1;
		if (isPhase2)
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_laser02\x00\x00\x00")); }
		
		bool isPhaseLast1 = Lua.Call<int>("IsPlayingDiEvent", "zev_rfl_shoot02") == 1;
		bool isPhaseLast2 = Lua.Call<int>("IsPlayingDiEvent", "zev_rfl_spQTE02") == 1;
		if ((isPhaseLast1) || (isPhaseLast2))
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_spQTE02\x00\x00\x00")); }	
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("zev_rfl_bitlaser02")); }
}

Code "Supreme Wing Laser for Final Horizons Ouranos" by "Hypernova"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossRifleConfig"
    #lib "HMM"
	#lib "INI"
    #import "Services"
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
	if (LevelInfo.GetCurrentStageID() == "w1r04")
	{
		var BossRifleConfigInfo = Reflection.GetDataInfo<BossRifleConfig.Root>("boss_rifle");
		if (BossRifleConfigInfo.pData == null)
			return;
		{
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[3], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SP01);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[5], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_COUNTER_BLOW);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[7], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SP02);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[10], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SHOT4);

			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[0].attackType, BossRifleConfig.ActionType.AT_BIT_WAVE);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[1].attackType, BossRifleConfig.ActionType.AT_WAIT);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[1].actionTime, 1);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[2].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[3].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[4].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[5].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[6].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[7].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[8].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[9].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[10].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[11].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].bitBreakAttackDatas[0].attackType, BossRifleConfig.ActionType.AT_QTE_NONE);
			
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[1], 65.0f);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[2], 0.0f);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[3], 0.0f);
		}
	}

	if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		var BossRifleConfigInfo = Reflection.GetDataInfo<BossRifleConfig.Root>("boss_rifle");
		if (BossRifleConfigInfo.pData == null)
			return;
		{
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[3], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SHOT3);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[5], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_NONE);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[7], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SHOT2);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.immediateActions[10], BossRifleConfig.BossRifleBattleParam_ActionType.BossRifleBattleParam_ActionType_AT_SHOT4);

			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[0].attackType, BossRifleConfig.ActionType.AT_BIT_WAVE);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[1].attackType, BossRifleConfig.ActionType.AT_LASER);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[2].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[3].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[4].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[5].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[6].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[7].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[8].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[9].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[10].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].attackDatas[11].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[1].bitBreakAttackDatas[0].attackType, BossRifleConfig.ActionType.AT_COUNTER_BLOW);

			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[0].attackType, BossRifleConfig.ActionType.AT_BIT_WAVE);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[1].attackType, BossRifleConfig.ActionType.AT_LASER);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[2].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[3].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[4].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[5].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[6].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[7].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[8].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].attackDatas[9].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[2].bitBreakAttackDatas[0].attackType, BossRifleConfig.ActionType.AT_SHOT3);

			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[0].attackType, BossRifleConfig.ActionType.AT_BIT_WAVE);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[1].attackType, BossRifleConfig.ActionType.AT_LASER);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[2].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[3].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[4].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[5].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[6].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[7].attackType, BossRifleConfig.ActionType.AT_HAND_R);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[8].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].attackDatas[9].attackType, BossRifleConfig.ActionType.AT_HAND_L);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patterns[3].bitBreakAttackDatas[0].attackType, BossRifleConfig.ActionType.AT_HOMINGLASER_NORMAL);
			
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[1], 75);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[2], 65);
			RFL_SET_PARAM(BossRifleConfigInfo, battleParam.giantPhaseParams[0].patternChangeHpRatios[3], 55);
		}
	}
}

Code "Supreme_Combat"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossRifleConfig"
    #lib "HMM"
	#lib "INI"
    #import "Services"

    static bool IsConfigInitialised = false;
	static int BossHP = 0;
    static bool healthBool = false;
//
{
    if (!IsConfigInitialised)
    {
		var mod = HMM.GetModByID("566416");

		if (mod == null)
			return;

		string modConfigIniPath = System.IO.Path.Combine(mod.Path, "mod.ini");
		var ini = INI.Read(modConfigIniPath);

		BossHP = INI.Parse<int>(ini["Main"]["BossCombat"], BossHP);
        IsConfigInitialised = true;

        if (BossHP == 1)
        {healthBool = true;}

        else
        {healthBool = false;}
    }

	if (!healthBool)
		return;

	var BossRifleConfigInfo = Reflection.GetDataInfo<BossRifleConfig.Root>("boss_rifle");

	if (BossRifleConfigInfo.pData == null)
		return;
	{
		RFL_SET_PARAM(BossRifleConfigInfo, bossBaseConfig.status.healthPoint, 175000);
		RFL_SET_PARAM(BossRifleConfigInfo, bossBaseConfig.dropRing.ringNumQuickCyloopUp, 5);
		RFL_SET_PARAM(BossRifleConfigInfo, bossBaseConfig.dropRing.ringNumQuickCyloopDown, 10);
		RFL_SET_PARAM(BossRifleConfigInfo, bossBaseConfig.dropRing.ringNumSonicSpecial, 20);
	}
};

Code "Gamemode Battle Rush Supreme" 
//
    using System.Numerics;
    using System.Collections.Generic;
    using System.IO;
	#import "Services"
	#include "Reflection" noemit
    #load "WindowsBase.dll"
    #load "PresentationCore.dll"
    #load "System.Numerics.dll"
	#lib "Reflection"
	#lib "BlackboardStatus"
    #lib "HMM"
	#lib "INI"
	#lib "GameMode"
	#lib "BossRifleConfig"
//
bool gameModeBattleRush = GameMode.GetName() == "GameModeBattleRush"
if (gameModeBattleRush)
{
	{
		var BossRifleConfigInfo = Reflection.GetDataInfo<BossRifleConfig.Root>("boss_rifle");
		if (BossRifleConfigInfo.pData == null)
			return;

		RFL_SET_PARAM(BossRifleConfigInfo, bossBaseConfig.status.healthPoint, 90000);
	}
}

Library "BossRifleConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    public struct CSetObjectID
    {
        public unsafe fixed byte GUID[16];
    }

    [StructLayout(LayoutKind.Explicit, Size = 32)]
    public struct CSetObjectIDArray
    {
        [FieldOffset(0)] public long pData;
        [FieldOffset(8)] public long Size;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x58)]
    public struct PlayerMoveableRangeParam
    {
        [FieldOffset(0x00)] public CSetObjectIDArray initPositions;
        [FieldOffset(0x20)] public UnmanagedString heightTargetNodeName;
        [FieldOffset(0x30)] public float heightMoveSpeed;
        [FieldOffset(0x34)] public float bossToPlayerDistanceMin;
        [FieldOffset(0x38)] public float bossToPlayerDistanceMax;
        [FieldOffset(0x3C)] public float offsetHeightMin;
        [FieldOffset(0x40)] public float offsetHeightMax;
        [FieldOffset(0x44)] public float areaDistanceMin;
        [FieldOffset(0x48)] public float areaDistanceMax;
        [FieldOffset(0x4C)] public float playerSpawnDistance;
        [FieldOffset(0x50)] public float playerRespawnDistance;
        [FieldOffset(0x54)] public float playerRespawnDistance2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct BossPhaseParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x01)] public bool isUsePillar;
        [FieldOffset(0x04)] public float phaseChangeHpRatio;
    }

    public enum EaseType : sbyte
    {
        ET_Sin = 0,
        ET_Cubic = 1,
        ET_Quadratic = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct BossLockOnCameraParam
    {
        [FieldOffset(0x00)] public float easeTime;
        [FieldOffset(0x04)] public EaseType easeType;
        [FieldOffset(0x08)] public UnmanagedString mainLookAtNodeName;
        [FieldOffset(0x20)] public Vector3 mainLookOffsetPos;
        [FieldOffset(0x30)] public UnmanagedString subLookAtNodeName;
        [FieldOffset(0x40)] public Vector3 subLookOffsetPos;
        [FieldOffset(0x50)] public float distance;
        [FieldOffset(0x60)] public Vector3 playerOffsetPos;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1A0)]
    public struct BossStatusConfig
    {
        [FieldOffset(0x00)] public uint healthPoint;
        [FieldOffset(0x04)] public float stunTime;
        [FieldOffset(0x08)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x14)] public unsafe fixed float maxStaggerPoint[5];
        [FieldOffset(0x28)] public ushort exp;
        [FieldOffset(0x30)] public PlayerMoveableRangeParam moveRangeParam;
        [FieldOffset(0x88)] public PlayerMoveableRangeParam cyloopDamageMoveRangeParam;
        [FieldOffset(0xE0)] public unsafe fixed byte /* BossPhaseParam[8] */ _phaseParams[64];

        public unsafe BossPhaseParam* phaseParams
        {
            get
            {
                fixed (byte* p_phaseParams = _phaseParams)
                    return (BossPhaseParam*)p_phaseParams;
            }
        }

        [FieldOffset(0x120)] public BossLockOnCameraParam cameraParam;
        [FieldOffset(0x190)] public bool isDebugDraw;
        [FieldOffset(0x194)] public uint debugDrawPhaseIndex;
    }

    public enum GimmickType : sbyte
    {
        GT_A = 0,
        GT_B = 1,
        GT_C = 2,
        GT_D = 3,
        GT_E = 4,
        NUM_GIMMICK_TYPE = 5
    }

    public enum AttackType : sbyte
    {
        AT_A = 0,
        AT_B = 1,
        AT_C = 2,
        AT_D = 3,
        AT_E = 4,
        NUM_ATTACK_TYPE = 5
    }

    public enum BossPillarParam_GimmickType : sbyte
    {
        BossPillarParam_GimmickType_GT_A = 0,
        BossPillarParam_GimmickType_GT_B = 1,
        BossPillarParam_GimmickType_GT_C = 2,
        BossPillarParam_GimmickType_GT_D = 3,
        BossPillarParam_GimmickType_GT_E = 4,
        BossPillarParam_GimmickType_NUM_GIMMICK_TYPE = 5
    }

    public enum BossPillarParam_AttackType : sbyte
    {
        BossPillarParam_AttackType_AT_A = 0,
        BossPillarParam_AttackType_AT_B = 1,
        BossPillarParam_AttackType_AT_C = 2,
        BossPillarParam_AttackType_AT_D = 3,
        BossPillarParam_AttackType_AT_E = 4,
        BossPillarParam_AttackType_NUM_ATTACK_TYPE = 5
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct BossPillarParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x04)] public float gimmickPhaseTime;
        [FieldOffset(0x08)] public float attackPhaseTime;
        [FieldOffset(0x0C)] public bool isUnique;
        [FieldOffset(0x0D)] public BossPillarParam_GimmickType gimmickType;
        [FieldOffset(0x10)] public float gimmickIntervalTime;
        [FieldOffset(0x14)] public BossPillarParam_AttackType attackType;
        [FieldOffset(0x18)] public float attackIntervalTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3B8)]
    public struct BossPillarConfig
    {
        [FieldOffset(0x00)] public GimmickType gimmickTypeAll;
        [FieldOffset(0x04)] public float gimmickIntervalTimeAll;
        [FieldOffset(0x08)] public AttackType attackTypeAll;
        [FieldOffset(0x0C)] public float attackIntervalTimeAll;
        [FieldOffset(0x10)] public unsafe fixed byte /* BossPillarParam[32] */ _pillars[896];

        public unsafe BossPillarParam* pillars
        {
            get
            {
                fixed (byte* p_pillars = _pillars)
                    return (BossPillarParam*)p_pillars;
            }
        }

        [FieldOffset(0x390)] public UnmanagedString spawnPositionName;
        [FieldOffset(0x3A0)] public uint pillarHealthPoint;
        [FieldOffset(0x3A4)] public uint pillarBreakDamage;
        [FieldOffset(0x3A8)] public float pillarBreakStun;
        [FieldOffset(0x3AC)] public bool isDebugDraw;
        [FieldOffset(0x3B0)] public uint DebugDrawType;
    }

    public enum CollisionType : sbyte
    {
        CT_SPHERE = 0,
        CT_CAPSULE = 1,
        CT_CYLINDER = 2,
        CT_BOX = 3,
        NUM_COLLISION_TYPE = 4
    }

    public enum ColliderActiveType : sbyte
    {
        Always = 0,
        OnContactActive = 1,
        OnContactInactive = 2,
        OnMotionActive = 3,
        OnMotionInactive = 4,
        Manual = 5,
        NUM_COLLIDER_ACTIVE_TYPE = 6
    }

    public enum ColliderProperty : short
    {
        CpNone = 0,
        CpBattleUse = 1,
        CpBattleUnuse = 2,
        CpRestPoint = 3,
        CpHomingTarget = 4,
        CpPerceive = 5,
        CpDamage = 6,
        CpAttack = 7,
        CpContactActive = 8,
        CpContactInactive = 9,
        CpMotionActive = 10,
        CpMotionInactive = 11,
        CpManual = 12,
        CpUpperSide = 13,
        CpLowerSide = 14,
        CpFrontSide = 15,
        CpBackSide = 16,
        CpLeftSide = 17,
        CpRightSide = 18,
        CpPointA = 19,
        CpPointB = 20,
        CpPointC = 21,
        CpPointD = 22,
        CpCyloopDownUnuse = 23,
        CpDummyDamage = 24,
        CpCable = 25,
        CpTackleHand = 26,
        NUM_COLLIDER_PROPERTY = 27
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct BossColliderStatus
    {
        [FieldOffset(0x00)] public ColliderActiveType type;
        [FieldOffset(0x02)] public unsafe fixed byte /* ColliderProperty[4] */ _propertys[8];

        public unsafe ColliderProperty* propertys
        {
            get
            {
                fixed (byte* p_propertys = _propertys)
                    return (ColliderProperty*)p_propertys;
            }
        }

        [FieldOffset(0x10)] public UnmanagedString text;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x80)]
    public struct BossPerceiveCollisionParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x02)] public short priority;
        [FieldOffset(0x04)] public CollisionType type;
        [FieldOffset(0x08)] public UnmanagedString attachNodeName;
        [FieldOffset(0x18)] public UnmanagedString name;
        [FieldOffset(0x28)] public BossColliderStatus status;
        [FieldOffset(0x50)] public Vector3 size;
        [FieldOffset(0x60)] public Vector3 offset;
        [FieldOffset(0x70)] public Vector3 rotation;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2010)]
    public struct BossPerceivePartsWithCollisionConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossPerceiveCollisionParam[64] */ _perceiveCollisions[8192];

        public unsafe BossPerceiveCollisionParam* perceiveCollisions
        {
            get
            {
                fixed (byte* p_perceiveCollisions = _perceiveCollisions)
                    return (BossPerceiveCollisionParam*)p_perceiveCollisions;
            }
        }

        [FieldOffset(0x2000)] public bool isDebugDraw;
    }

    public enum PointType : sbyte
    {
        PT_HOMINGPOINT = 0,
        PT_HEROSAGE = 1,
        PT_MINIONGENERATOR = 2,
        PT_TRIGGER = 3,
        PT_ANCHOR = 4,
        PT_DAMAGEPOINT = 5,
        PT_STICK = 6,
        PT_DAMAGEEFFECT = 7,
        PT_DASHCIRCLE = 8,
        NUM_POINT_TYPE = 9
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct BossHomingPointParam
    {
        [FieldOffset(0x00)] public BossColliderStatus status;
        [FieldOffset(0x20)] public float distance;
        [FieldOffset(0x24)] public float nextSearchDistance;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossMinionParam
    {
        [FieldOffset(0x00)] public uint num;
        [FieldOffset(0x04)] public float interval;
        [FieldOffset(0x08)] public float liveTime;
        [FieldOffset(0x0C)] public float waitTime;
    }

    public enum Shape : sbyte
    {
        SHAPE_BOX = 0,
        SHAPE_SPHERE = 1,
        SHAPE_CYLINDER = 2,
        SHAPE_CAPSULE = 3
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossTrigerParam
    {
        [FieldOffset(0x00)] public Shape ShapeType;
        [FieldOffset(0x04)] public float CollisionWidth;
        [FieldOffset(0x08)] public float CollisionHeight;
        [FieldOffset(0x0C)] public float CollisionDepth;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct BossStickParam
    {
        [FieldOffset(0x00)] public float phaseTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct BossDamagePointParam
    {
        [FieldOffset(0x00)] public bool isCyloopDownUnuse;
        [FieldOffset(0x08)] public UnmanagedString text;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct BossDashCirclPointParam
    {
        [FieldOffset(0x00)] public int focusGeometryIndex;
        [FieldOffset(0x04)] public int focusTriangleIndex;
        [FieldOffset(0x08)] public float sizeScale;
        [FieldOffset(0x0C)] public float impulseSpeed;
        [FieldOffset(0x10)] public float ocTime;
        [FieldOffset(0x14)] public float slowRateBoss;
        [FieldOffset(0x18)] public float slowRatePlayer;
        [FieldOffset(0x1C)] public float slowTime;
        [FieldOffset(0x20)] public float slowEaseInTime;
        [FieldOffset(0x24)] public float slowEaseOutTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE0)]
    public struct BossMeshFrameParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x04)] public uint geometryIndex;
        [FieldOffset(0x08)] public uint triangleIndex;
        [FieldOffset(0x0C)] public PointType type;
        [FieldOffset(0x10)] public BossHomingPointParam homingPoint;
        [FieldOffset(0x38)] public BossMinionParam minionParam;
        [FieldOffset(0x48)] public BossTrigerParam trigger;
        [FieldOffset(0x58)] public BossStickParam stickParam;
        [FieldOffset(0x60)] public BossDamagePointParam damagePoint;
        [FieldOffset(0x78)] public BossDashCirclPointParam dashCirclPoint;
        [FieldOffset(0xA0)] public unsafe fixed int linkNums[5];
        [FieldOffset(0xC0)] public Vector3 offsetPos;
        [FieldOffset(0xD0)] public Vector3 offsetRot;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE010)]
    public struct BossMeshFrameConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMeshFrameParam[256] */ _meshShapeKeyFrames[57344];

        public unsafe BossMeshFrameParam* meshShapeKeyFrames
        {
            get
            {
                fixed (byte* p_meshShapeKeyFrames = _meshShapeKeyFrames)
                    return (BossMeshFrameParam*)p_meshShapeKeyFrames;
            }
        }

        [FieldOffset(0xE000)] public bool isDebugDraw;
        [FieldOffset(0xE001)] public bool isDebugDrawPoint;
        [FieldOffset(0xE002)] public bool isDebugDrawMesh;
        [FieldOffset(0xE003)] public bool isDebugDrawMeshIndivid;
        [FieldOffset(0xE004)] public float debugDrawMeshTriangleDistance;
        [FieldOffset(0xE008)] public uint debugDrawMeshTriangleNum;
    }

    public enum BossAttackCollisionParam_AttackType : sbyte
    {
        AT_NONE = 0,
        AT_BLOWOFF = 1,
        AT_SLAMDOWNWARD = 2,
        AT_KILLING = 3,
        AT_NOTPARRY = 4,
        AT_NOTDAMAGE = 5,
        AT_NOTDAMAGETRIGGER = 6,
        BossAttackCollisionParam_AttackType_NUM_ATTACK_TYPE = 7
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct BossAttackCollisionParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x08)] public UnmanagedString attachNodeName;
        [FieldOffset(0x18)] public float damageVelocityRaito;
        [FieldOffset(0x1C)] public unsafe fixed byte /* BossAttackCollisionParam_AttackType[4] */ _types[4];

        public unsafe BossAttackCollisionParam_AttackType* types
        {
            get
            {
                fixed (byte* p_types = _types)
                    return (BossAttackCollisionParam_AttackType*)p_types;
            }
        }

        [FieldOffset(0x20)] public BossColliderStatus status;
        [FieldOffset(0x40)] public float size;
        [FieldOffset(0x50)] public Vector3 offset;
        [FieldOffset(0x60)] public UnmanagedString parryCounterTargetCollisionName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C10)]
    public struct BossAttackCollisionConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossAttackCollisionParam[64] */ _attackCollisions[7168];

        public unsafe BossAttackCollisionParam* attackCollisions
        {
            get
            {
                fixed (byte* p_attackCollisions = _attackCollisions)
                    return (BossAttackCollisionParam*)p_attackCollisions;
            }
        }

        [FieldOffset(0x1C00)] public bool isDebugDraw;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x60)]
    public struct BossBattlePhaseCollisionParam
    {
        [FieldOffset(0x00)] public bool isUse;
        [FieldOffset(0x08)] public UnmanagedString attachNodeName;
        [FieldOffset(0x18)] public UnmanagedString name;
        [FieldOffset(0x28)] public float size;
        [FieldOffset(0x30)] public Vector3 offset;
        [FieldOffset(0x40)] public Vector3 rotation;
        [FieldOffset(0x50)] public bool isParryActive;
        [FieldOffset(0x54)] public float cyloopRadius;
        [FieldOffset(0x58)] public bool onlyRigidBody;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x610)]
    public struct BossBattlePhaseCollisionConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossBattlePhaseCollisionParam[16] */ _battleCollisions[1536];

        public unsafe BossBattlePhaseCollisionParam* battleCollisions
        {
            get
            {
                fixed (byte* p_battleCollisions = _battleCollisions)
                    return (BossBattlePhaseCollisionParam*)p_battleCollisions;
            }
        }

        [FieldOffset(0x600)] public bool isDebugDraw;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossDropRingConfig
    {
        [FieldOffset(0x00)] public uint ringNumQuickCyloopUp;
        [FieldOffset(0x04)] public uint ringNumQuickCyloopDown;
        [FieldOffset(0x08)] public uint ringNumSonicSpecial;
        [FieldOffset(0x0C)] public float ringSpawnDistance;
        [FieldOffset(0x10)] public float ringSuckedVelocity;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x127C0)]
    public struct BossBaseConfig
    {
        [FieldOffset(0x00)] public BossStatusConfig status;
        [FieldOffset(0x1A0)] public BossPillarConfig pillar;
        [FieldOffset(0x560)] public BossPerceivePartsWithCollisionConfig perceivPartsWithCollision;
        [FieldOffset(0x2570)] public BossMeshFrameConfig meshShapeKeyFrame;
        [FieldOffset(0x10580)] public BossAttackCollisionConfig attackCollision;
        [FieldOffset(0x12190)] public BossBattlePhaseCollisionConfig battleCollision;
        [FieldOffset(0x127A0)] public BossDropRingConfig dropRing;
    }

    public enum ActionType : sbyte
    {
        ActionType_AT_NONE = 0,
        AT_HAND_L = 1,
        AT_HAND_R = 2,
        AT_SHOT1 = 3,
        AT_SHOT2 = 4,
        AT_SHOT3 = 5,
        AT_SHOT4 = 6,
        AT_QTE_NONE = 7,
        AT_WAIT = 8,
        AT_LASER = 9,
        AT_HOMINGLASER_NORMAL = 10,
        AT_HOMINGLASER_FLY = 11,
        AT_BIT_WAVE = 12,
        AT_BIT_WAVE_END = 13,
        AT_COUNTER_BLOW = 14,
        AT_SP01 = 15,
        AT_SP02 = 16,
        NUM_ACTION_TYPE = 17
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x38)]
    public struct BossRifleAttackData
    {
        [FieldOffset(0x00)] public ActionType attackType;
        [FieldOffset(0x08)] public UnmanagedString waveName;
        [FieldOffset(0x18)] public UnmanagedString subWaveName;
        [FieldOffset(0x28)] public float actionTime;
        [FieldOffset(0x2C)] public short nextStep;
        [FieldOffset(0x2E)] public bool isBitActionReset;
        [FieldOffset(0x2F)] public bool isFlyMoveReverse;
        [FieldOffset(0x30)] public bool isFlyWait;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3F8)]
    public struct BossRifleAttackPatternParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossRifleAttackData[16] */ _attackDatas[896];

        public unsafe BossRifleAttackData* attackDatas
        {
            get
            {
                fixed (byte* p_attackDatas = _attackDatas)
                    return (BossRifleAttackData*)p_attackDatas;
            }
        }

        [FieldOffset(0x380)] public unsafe fixed byte /* BossRifleAttackData[2] */ _bitBreakAttackDatas[112];

        public unsafe BossRifleAttackData* bitBreakAttackDatas
        {
            get
            {
                fixed (byte* p_bitBreakAttackDatas = _bitBreakAttackDatas)
                    return (BossRifleAttackData*)p_bitBreakAttackDatas;
            }
        }

        [FieldOffset(0x3F0)] public uint breakBitNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1000)]
    public struct BossRiflePhaseParam
    {
        [FieldOffset(0x00)] public float attackWaitTime;
        [FieldOffset(0x04)] public float attackSpeedRatio;
        [FieldOffset(0x08)] public uint knockbackCountMax;
        [FieldOffset(0x10)] public unsafe fixed byte /* BossRifleAttackPatternParam[4] */ _patterns[4064];

        public unsafe BossRifleAttackPatternParam* patterns
        {
            get
            {
                fixed (byte* p_patterns = _patterns)
                    return (BossRifleAttackPatternParam*)p_patterns;
            }
        }

        [FieldOffset(0xFF0)] public unsafe fixed float patternChangeHpRatios[4];
    }

    public enum ActionAttribute : sbyte
    {
        AA_NONE = 0,
        AA_ALL = 1,
        AA_FRONT = 2,
        AA_BACK = 3,
        AA_LEFT = 4,
        AA_RIGHT = 5
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x48)]
    public struct BossRiflePhaseAttackActionParam
    {
        [FieldOffset(0x00)] public ActionAttribute attribute1;
        [FieldOffset(0x01)] public ActionAttribute attribute2;
        [FieldOffset(0x04)] public float useDistanceMin;
        [FieldOffset(0x08)] public float useDistanceMax;
        [FieldOffset(0x0C)] public float useHeightMin;
        [FieldOffset(0x10)] public float useHeightMax;
        [FieldOffset(0x14)] public float useAngleMin;
        [FieldOffset(0x18)] public float useAngleMax;
        [FieldOffset(0x1C)] public float useAbsAngleOver;
        [FieldOffset(0x20)] public float useHpRatioMin;
        [FieldOffset(0x24)] public float useHpRatioMax;
        [FieldOffset(0x28)] public float useAreaOver;
        [FieldOffset(0x2C)] public uint priority;
        [FieldOffset(0x30)] public float coolTime;
        [FieldOffset(0x34)] public float initCoolTime;
        [FieldOffset(0x38)] public float readyTime;
        [FieldOffset(0x3C)] public uint consecutiveUsesLimit;
        [FieldOffset(0x40)] public float consecutiveUsesLimitCoolTime;
        [FieldOffset(0x44)] public bool isCounterUse;
        [FieldOffset(0x45)] public bool isCounterOnly;
    }

    public enum BossRifleBattleParam_ActionType : sbyte
    {
        BossRifleBattleParam_ActionType_AT_NONE = 0,
        BossRifleBattleParam_ActionType_AT_HAND_L = 1,
        BossRifleBattleParam_ActionType_AT_HAND_R = 2,
        BossRifleBattleParam_ActionType_AT_SHOT1 = 3,
        BossRifleBattleParam_ActionType_AT_SHOT2 = 4,
        BossRifleBattleParam_ActionType_AT_SHOT3 = 5,
        BossRifleBattleParam_ActionType_AT_SHOT4 = 6,
        BossRifleBattleParam_ActionType_AT_QTE_NONE = 7,
        BossRifleBattleParam_ActionType_AT_WAIT = 8,
        BossRifleBattleParam_ActionType_AT_LASER = 9,
        BossRifleBattleParam_ActionType_AT_HOMINGLASER_NORMAL = 10,
        BossRifleBattleParam_ActionType_AT_HOMINGLASER_FLY = 11,
        BossRifleBattleParam_ActionType_AT_BIT_WAVE = 12,
        BossRifleBattleParam_ActionType_AT_BIT_WAVE_END = 13,
        BossRifleBattleParam_ActionType_AT_COUNTER_BLOW = 14,
        BossRifleBattleParam_ActionType_AT_SP01 = 15,
        BossRifleBattleParam_ActionType_AT_SP02 = 16,
        BossRifleBattleParam_ActionType_NUM_ACTION_TYPE = 17
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct BossRifleCyloopFloatActionParam
    {
        [FieldOffset(0x00)] public float landingCounterHPRatio;
        [FieldOffset(0x04)] public float floatCounterHPRatio;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct BossRifleBattleAttackHomingLaserShotPoint
    {
        [FieldOffset(0x00)] public bool isParry;
        [FieldOffset(0x01)] public bool isUse;
        [FieldOffset(0x04)] public float shotDirElevation;
        [FieldOffset(0x08)] public float shotDirRoll;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x270)]
    public struct BossRifleBattleAttackHomingLaserAttackParam
    {
        [FieldOffset(0x00)] public UnmanagedString nodeName;
        [FieldOffset(0x10)] public Vector3 nodePos;
        [FieldOffset(0x20)] public Vector3 nodeFront;
        [FieldOffset(0x30)] public Vector3 nodeAxis;
        [FieldOffset(0x40)] public float straightKeepTime;
        [FieldOffset(0x44)] public uint parryMax;
        [FieldOffset(0x48)] public uint num;
        [FieldOffset(0x4C)] public uint countMax;
        [FieldOffset(0x50)] public float initSpeed;
        [FieldOffset(0x54)] public float speed;
        [FieldOffset(0x58)] public float acceleDelay;
        [FieldOffset(0x5C)] public float acceleTime;
        [FieldOffset(0x60)] public float interval;
        [FieldOffset(0x64)] public unsafe fixed float intervals[8];
        [FieldOffset(0x84)] public float delay;
        [FieldOffset(0x88)] public unsafe fixed byte /* BossRifleBattleAttackHomingLaserShotPoint[32] */ _points[384];

        public unsafe BossRifleBattleAttackHomingLaserShotPoint* points
        {
            get
            {
                fixed (byte* p_points = _points)
                    return (BossRifleBattleAttackHomingLaserShotPoint*)p_points;
            }
        }

        [FieldOffset(0x210)] public Vector3 fixedCameraEyePos;
        [FieldOffset(0x220)] public Vector3 fixedCameraLookAtPos;
        [FieldOffset(0x230)] public float fixedCameraDelay;
        [FieldOffset(0x234)] public float fixedCameraTime;
        [FieldOffset(0x238)] public float fixedCameraStartEaseTime;
        [FieldOffset(0x23C)] public float fixedCameraEndEaseTime;
        [FieldOffset(0x240)] public Vector3 parryCameraEyePos;
        [FieldOffset(0x250)] public Vector3 parryCameraLookAtPos;
        [FieldOffset(0x260)] public float parryCameraStartEaseTime;
        [FieldOffset(0x264)] public float parryCameraEndEaseTime;
        [FieldOffset(0x268)] public bool isParrySlow;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x770)]
    public struct BossRifleBattleAttackHomingLaser
    {
        [FieldOffset(0x00)] public float bulletScale;
        [FieldOffset(0x04)] public float parryMoveTime;
        [FieldOffset(0x10)] public BossRifleBattleAttackHomingLaserAttackParam headShotParam;
        [FieldOffset(0x280)] public BossRifleBattleAttackHomingLaserAttackParam headShotFlyParam;
        [FieldOffset(0x4F0)] public BossRifleBattleAttackHomingLaserAttackParam normalShotParam;
        [FieldOffset(0x760)] public bool isDebugDraw;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct BossRifleBattleAttackHandLaserPatternParam
    {
        [FieldOffset(0x00)] public float intarvalDistance;
        [FieldOffset(0x04)] public float delay;
        [FieldOffset(0x10)] public Vector3 localStartPos;
        [FieldOffset(0x20)] public Vector3 localEndPos;
        [FieldOffset(0x30)] public Vector3 localStartDir;
        [FieldOffset(0x40)] public Vector3 localEndDir;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2A0)]
    public struct BossRifleBattleAttackHandLaser
    {
        [FieldOffset(0x00)] public float bulletRadius;
        [FieldOffset(0x04)] public float bulletSpeed;
        [FieldOffset(0x08)] public float wayAngle;
        [FieldOffset(0x0C)] public uint wayNum;
        [FieldOffset(0x10)] public float limitDistance;
        [FieldOffset(0x14)] public float blowoffSpeed;
        [FieldOffset(0x18)] public float outOfControlTime;
        [FieldOffset(0x1C)] public float keepVelocity;
        [FieldOffset(0x20)] public unsafe fixed byte /* BossRifleBattleAttackHandLaserPatternParam[4] */ _handLeftPatterns[320];

        public unsafe BossRifleBattleAttackHandLaserPatternParam* handLeftPatterns
        {
            get
            {
                fixed (byte* p_handLeftPatterns = _handLeftPatterns)
                    return (BossRifleBattleAttackHandLaserPatternParam*)p_handLeftPatterns;
            }
        }

        [FieldOffset(0x160)] public unsafe fixed byte /* BossRifleBattleAttackHandLaserPatternParam[4] */ _handRightPatterns[320];

        public unsafe BossRifleBattleAttackHandLaserPatternParam* handRightPatterns
        {
            get
            {
                fixed (byte* p_handRightPatterns = _handRightPatterns)
                    return (BossRifleBattleAttackHandLaserPatternParam*)p_handRightPatterns;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct BossRifleBattleFlyParam
    {
        [FieldOffset(0x00)] public float flyHeight;
        [FieldOffset(0x04)] public float flyRotationSpeed;
        [FieldOffset(0x08)] public float flyMoveHitDamageDownSpeedRatio;
        [FieldOffset(0x0C)] public float flyMoveHitDamageDownSpeedTime;
        [FieldOffset(0x10)] public float flyMoveSpeed;
        [FieldOffset(0x14)] public float flyMoveCircleRadius;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct BossRifleBattleZoomCamera
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float elevation;
        [FieldOffset(0x08)] public float playerHeight;
        [FieldOffset(0x0C)] public float easeInTime;
        [FieldOffset(0x10)] public float easeOutTime;
        [FieldOffset(0x14)] public float changeParamDistanceMin;
        [FieldOffset(0x18)] public float changeParamDistanceMax;
        [FieldOffset(0x1C)] public float addDistance;
        [FieldOffset(0x20)] public float addElevation;
        [FieldOffset(0x24)] public float addPlayerHeight;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct BossRifleBattleCameraParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossRifleBattleZoomCamera[2] */ _normalCamera[80];

        public unsafe BossRifleBattleZoomCamera* normalCamera
        {
            get
            {
                fixed (byte* p_normalCamera = _normalCamera)
                    return (BossRifleBattleZoomCamera*)p_normalCamera;
            }
        }

        [FieldOffset(0x50)] public unsafe fixed byte /* BossRifleBattleZoomCamera[2] */ _flyCamera[80];

        public unsafe BossRifleBattleZoomCamera* flyCamera
        {
            get
            {
                fixed (byte* p_flyCamera = _flyCamera)
                    return (BossRifleBattleZoomCamera*)p_flyCamera;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossRifleParrySlowParam
    {
        [FieldOffset(0x00)] public float scale;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public float easeOutTime;
        [FieldOffset(0x0C)] public bool cameraSlow;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct BossRifleParryParam
    {
        [FieldOffset(0x00)] public BossRifleParrySlowParam homingLaserParrySlow;
        [FieldOffset(0x10)] public BossRifleParrySlowParam homingLaserLastParrySlow;
        [FieldOffset(0x20)] public BossRifleParrySlowParam homingLaserOneShotParrySlow;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x4FC0)]
    public struct BossRifleBattleParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossRiflePhaseParam[4] */ _giantPhaseParams[16384];

        public unsafe BossRiflePhaseParam* giantPhaseParams
        {
            get
            {
                fixed (byte* p_giantPhaseParams = _giantPhaseParams)
                    return (BossRiflePhaseParam*)p_giantPhaseParams;
            }
        }

        [FieldOffset(0x4000)] public unsafe fixed byte /* BossRiflePhaseAttackActionParam[16] */ _actionParams[1152];

        public unsafe BossRiflePhaseAttackActionParam* actionParams
        {
            get
            {
                fixed (byte* p_actionParams = _actionParams)
                    return (BossRiflePhaseAttackActionParam*)p_actionParams;
            }
        }

        [FieldOffset(0x4480)] public unsafe fixed byte /* BossRifleBattleParam_ActionType[20] */ _immediateActions[20];

        public unsafe BossRifleBattleParam_ActionType* immediateActions
        {
            get
            {
                fixed (byte* p_immediateActions = _immediateActions)
                    return (BossRifleBattleParam_ActionType*)p_immediateActions;
            }
        }

        [FieldOffset(0x4494)] public BossRifleCyloopFloatActionParam cyloopFloatAction;
        [FieldOffset(0x44A0)] public BossRifleBattleAttackHomingLaser attackHomingLaser;
        [FieldOffset(0x4C10)] public BossRifleBattleAttackHandLaser attackHandLaser;
        [FieldOffset(0x4EB0)] public BossRifleBattleFlyParam flyParam;
        [FieldOffset(0x4EC8)] public BossRifleBattleCameraParam cameraParam;
        [FieldOffset(0x4F68)] public BossRifleParryParam parryParam;
        [FieldOffset(0x4F98)] public unsafe fixed float thresholdDamageEffectHPRatio[3];
        [FieldOffset(0x4FA4)] public unsafe fixed float qteSucceedWaitTimes[4];
        [FieldOffset(0x4FB4)] public bool isDebugDraw;
        [FieldOffset(0x4FB5)] public bool isSkip;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x03)]
    public struct EnemyPracticeNotifierConfig
    {
        [FieldOffset(0x00)] public bool usePracticeNotifier;
        [FieldOffset(0x01)] public sbyte practiceNo;
        [FieldOffset(0x02)] public sbyte tipsNo;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x06)]
    public struct BossRifleNotifierParam
    {
        [FieldOffset(0x00)] public EnemyPracticeNotifierConfig notifierConfigBattle1;
        [FieldOffset(0x03)] public EnemyPracticeNotifierConfig notifierConfigBattle2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x17790)]
    public struct Root
    {
        [FieldOffset(0)]     public BossBaseConfig bossBaseConfig;
        [FieldOffset(0x127C0)] public BossRifleBattleParam battleParam;
        [FieldOffset(0x17780)] public BossRifleNotifierParam notifierParam;
    }

}

Code "BossBit_Combat"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossBitConfig"
    #lib "HMM"
	#lib "INI"
    #import "Services"

    static bool IsConfigInitialised = false;
	static int BossHP = 0;
    static bool healthBool = false;
//
{
    if (!IsConfigInitialised)
    {
		var mod = HMM.GetModByID("566416");

		if (mod == null)
			return;

		string modConfigIniPath = System.IO.Path.Combine(mod.Path, "mod.ini");
		var ini = INI.Read(modConfigIniPath);

		BossHP = INI.Parse<int>(ini["Main"]["BossCombat"], BossHP);
        IsConfigInitialised = true;

        if (BossHP == 1)
        {
            healthBool = true;
        }
        else
        {
            healthBool = false;
        }
    }
	
	if (!healthBool)
		return;

	var BossBitConfigInfo = Reflection.GetDataInfo<BossBitConfig.Root>("boss_bit_param");

	if (BossBitConfigInfo.pData == null)
		return;
	{
		RFL_SET_PARAM(BossBitConfigInfo, smallBitLaserParam.bitHp, 750.0f);
		RFL_SET_PARAM(BossBitConfigInfo, smallBitLaserParam.dropRingNum, 5);
	}
}

Library "BossBitConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct LargeBitLaserParameter
    {
        [FieldOffset(0x00)] public float rangeMin;
        [FieldOffset(0x04)] public float rangeMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct SmallBitLaserBulletParameter
    {
        [FieldOffset(0x00)] public float bulletRadius;
        [FieldOffset(0x04)] public float bulletMoveLimitDistance;
        [FieldOffset(0x08)] public float bitHp;
        [FieldOffset(0x0C)] public float rotDamageAngleSpeed;
        [FieldOffset(0x10)] public float rotDamageSize;
        [FieldOffset(0x14)] public float hitDamageNotAttackTime;
        [FieldOffset(0x18)] public float blowoffSpeed;
        [FieldOffset(0x1C)] public float outOfControlTime;
        [FieldOffset(0x20)] public float keepVelocity;
        [FieldOffset(0x24)] public float muzzleEffectMinTime;
        [FieldOffset(0x28)] public byte dropRingNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum BulletType : byte
    {
        Normal = 0,
        Normal2 = 1,
        Laser = 2,
        Homing = 3
    }

    public enum RotType : byte
    {
        Rotation = 0,
        RoundTrip = 1,
        Aim = 2,
        Fix = 3
    }

    public enum CameraId : byte
    {
        Invalid = 0,
        Rotate = 1,
        Trace = 2,
        Sub = 3,
        Num = 4
    }

    public enum FormationId : byte
    {
        Default = 0,
        FanShaped = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x64)]
    public struct SmallBitAttackPatternParameter
    {
        [FieldOffset(0x00)] public bool isParry;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public float angleSpeed;
        [FieldOffset(0x0C)] public BulletType bulletType;
        [FieldOffset(0x0D)] public RotType rotType;
        [FieldOffset(0x10)] public float rotAngle;
        [FieldOffset(0x14)] public float phaseRotTime;
        [FieldOffset(0x18)] public uint shootNum;
        [FieldOffset(0x1C)] public float shootSpeed;
        [FieldOffset(0x20)] public float addShootSpeed;
        [FieldOffset(0x24)] public float shootAccel;
        [FieldOffset(0x28)] public float shootAccelMax;
        [FieldOffset(0x2C)] public float shootAccelDelay;
        [FieldOffset(0x30)] public byte wayNum;
        [FieldOffset(0x34)] public float wayAngle;
        [FieldOffset(0x38)] public float shootTime;
        [FieldOffset(0x3C)] public float phaseShootTime;
        [FieldOffset(0x40)] public uint periodShootCool;
        [FieldOffset(0x44)] public float periodShootCoolTime;
        [FieldOffset(0x48)] public float homingAccuracy;
        [FieldOffset(0x4C)] public float homingDelay;
        [FieldOffset(0x50)] public float homingLimitAngle;
        [FieldOffset(0x54)] public bool isHomingLowFly;
        [FieldOffset(0x55)] public CameraId overlookingId;
        [FieldOffset(0x58)] public float waveRotationSpeed;
        [FieldOffset(0x5C)] public float flyMoveSpeed;
        [FieldOffset(0x60)] public FormationId formationId;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x78)]
    public struct SmallBitSetPatternParameter
    {
        [FieldOffset(0x00)] public UnmanagedString text;
        [FieldOffset(0x10)] public SmallBitAttackPatternParameter param;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct SmallBitFormationFanShaped
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float height;
        [FieldOffset(0x08)] public float radius;
        [FieldOffset(0x0C)] public float angleMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct SmallBitFormationParameter
    {
        [FieldOffset(0x00)] public float changeTime;
        [FieldOffset(0x04)] public float changeDelay;
        [FieldOffset(0x08)] public float changeOffsetHeight;
        [FieldOffset(0x0C)] public SmallBitFormationFanShaped fanShaped;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1E58)]
    public struct Root
    {
        [FieldOffset(0x00)] public LargeBitLaserParameter largeBitLaserParam;
        [FieldOffset(0x08)] public SmallBitLaserBulletParameter smallBitLaserParam;
        [FieldOffset(0x38)] public unsafe fixed byte /* SmallBitSetPatternParameter[64] */ _smallBitPatternDatas[7680];

        public unsafe SmallBitSetPatternParameter* smallBitPatternDatas
        {
            get
            {
                fixed (byte* p_smallBitPatternDatas = _smallBitPatternDatas)
                    return (SmallBitSetPatternParameter*)p_smallBitPatternDatas;
            }
        }

        [FieldOffset(0x1E38)] public SmallBitFormationParameter smallBitFormation;
    }

}
