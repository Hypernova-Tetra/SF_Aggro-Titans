Code "RifleCombat"
//
	#include "Reflection" noemit
	#lib "Reflection"
	#lib "BossBitConfig"
    #lib "HMM"
	#lib "INI"
    #import "Services"

    static bool IsConfigInitialised = false;
	static int BossHP = 0;
    static bool healthBool = false;
//
{
    if (!IsConfigInitialised)
    {
		var mod = HMM.GetModByID("H1661726NB");

		if (mod == null)
			return;

		string modConfigIniPath = System.IO.Path.Combine(mod.Path, "mod.ini");
		var ini = INI.Read(modConfigIniPath);

		BossHP = INI.Parse<int>(ini["Main"]["BossCombat"], BossHP);
        IsConfigInitialised = true;

        if (BossHP == 1)
        {
            healthBool = true;
        }
        else
        {
            healthBool = false;
        }
    }
	
	if (!healthBool)
		return;

	var BossBitConfigInfo = Reflection.GetDataInfo<BossBitConfig.Root>("boss_bit_param");

	if (BossBitConfigInfo.pData == null)
		return;

	RFL_SET_PARAM(BossBitConfigInfo, smallBitLaserParam.bitHp, 750.0f);

}

Library "BossBitConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct LargeBitLaserParameter
    {
        [FieldOffset(0x00)] public float rangeMin;
        [FieldOffset(0x04)] public float rangeMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct SmallBitLaserBulletParameter
    {
        [FieldOffset(0x00)] public float bulletRadius;
        [FieldOffset(0x04)] public float bulletMoveLimitDistance;
        [FieldOffset(0x08)] public float bitHp;
        [FieldOffset(0x0C)] public float rotDamageAngleSpeed;
        [FieldOffset(0x10)] public float rotDamageSize;
        [FieldOffset(0x14)] public float hitDamageNotAttackTime;
        [FieldOffset(0x18)] public float blowoffSpeed;
        [FieldOffset(0x1C)] public float outOfControlTime;
        [FieldOffset(0x20)] public float keepVelocity;
        [FieldOffset(0x24)] public float muzzleEffectMinTime;
        [FieldOffset(0x28)] public byte dropRingNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum BulletType : byte
    {
        Normal = 0,
        Normal2 = 1,
        Laser = 2,
        Homing = 3
    }

    public enum RotType : byte
    {
        Rotation = 0,
        RoundTrip = 1,
        Aim = 2,
        Fix = 3
    }

    public enum CameraId : byte
    {
        Invalid = 0,
        Rotate = 1,
        Trace = 2,
        Sub = 3,
        Num = 4
    }

    public enum FormationId : byte
    {
        Default = 0,
        FanShaped = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x64)]
    public struct SmallBitAttackPatternParameter
    {
        [FieldOffset(0x00)] public bool isParry;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public float angleSpeed;
        [FieldOffset(0x0C)] public BulletType bulletType;
        [FieldOffset(0x0D)] public RotType rotType;
        [FieldOffset(0x10)] public float rotAngle;
        [FieldOffset(0x14)] public float phaseRotTime;
        [FieldOffset(0x18)] public uint shootNum;
        [FieldOffset(0x1C)] public float shootSpeed;
        [FieldOffset(0x20)] public float addShootSpeed;
        [FieldOffset(0x24)] public float shootAccel;
        [FieldOffset(0x28)] public float shootAccelMax;
        [FieldOffset(0x2C)] public float shootAccelDelay;
        [FieldOffset(0x30)] public byte wayNum;
        [FieldOffset(0x34)] public float wayAngle;
        [FieldOffset(0x38)] public float shootTime;
        [FieldOffset(0x3C)] public float phaseShootTime;
        [FieldOffset(0x40)] public uint periodShootCool;
        [FieldOffset(0x44)] public float periodShootCoolTime;
        [FieldOffset(0x48)] public float homingAccuracy;
        [FieldOffset(0x4C)] public float homingDelay;
        [FieldOffset(0x50)] public float homingLimitAngle;
        [FieldOffset(0x54)] public bool isHomingLowFly;
        [FieldOffset(0x55)] public CameraId overlookingId;
        [FieldOffset(0x58)] public float waveRotationSpeed;
        [FieldOffset(0x5C)] public float flyMoveSpeed;
        [FieldOffset(0x60)] public FormationId formationId;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x78)]
    public struct SmallBitSetPatternParameter
    {
        [FieldOffset(0x00)] public UnmanagedString text;
        [FieldOffset(0x10)] public SmallBitAttackPatternParameter param;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct SmallBitFormationFanShaped
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float height;
        [FieldOffset(0x08)] public float radius;
        [FieldOffset(0x0C)] public float angleMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct SmallBitFormationParameter
    {
        [FieldOffset(0x00)] public float changeTime;
        [FieldOffset(0x04)] public float changeDelay;
        [FieldOffset(0x08)] public float changeOffsetHeight;
        [FieldOffset(0x0C)] public SmallBitFormationFanShaped fanShaped;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1E58)]
    public struct Root
    {
        [FieldOffset(0x00)] public LargeBitLaserParameter largeBitLaserParam;
        [FieldOffset(0x08)] public SmallBitLaserBulletParameter smallBitLaserParam;
        [FieldOffset(0x38)] public unsafe fixed byte /* SmallBitSetPatternParameter[64] */ _smallBitPatternDatas[7680];

        public unsafe SmallBitSetPatternParameter* smallBitPatternDatas
        {
            get
            {
                fixed (byte* p_smallBitPatternDatas = _smallBitPatternDatas)
                    return (SmallBitSetPatternParameter*)p_smallBitPatternDatas;
            }
        }

        [FieldOffset(0x1E38)] public SmallBitFormationParameter smallBitFormation;
    }

}
