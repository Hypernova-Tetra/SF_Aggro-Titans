Code "Skippable Phase 2 cutscene" by "Hypernova and Ashrindy"
//
	#lib "GameManager"
    #lib "EventPlayer"
	#lib "Lua"
	#lib "GameObject"
	#lib "BlackboardStatus"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
	
	WriteProtected<byte>
	(
		/* 0x141534F0 */ ScanSignature    ("boss_giant01_bo1140","xxxxxxxxxxxxxxxxxxx"),
		System.Text.Encoding.UTF8.GetBytes("bo1141\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	);
	
	if ((LevelInfo.GetCurrentStageID() == "w1t01") || (LevelInfo.GetCurrentStageID() == "w1b01"))
	{
		bool eventGiantPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo1140") == 1;
		if (eventGiantPhase2)
		{
			var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
			var setupData = new EventPlayer.EventSetupData("bo1141");
			evtPlayer->PlayEvent(ref setupData);
		}
	}

	WriteProtected<byte>
	(
		/* 0x14144C988 */ ScanSignature   ("boss_giant02_bo2140", "xxxxxxxxxxxxxxxxxxx"),
		System.Text.Encoding.UTF8.GetBytes("bo2141\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	);

	bool eventDragonPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo2140") == 1;
	if (eventDragonPhase2)
	{
		var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
		var setupData = new EventPlayer.EventSetupData("bo2141");
		evtPlayer->PlayEvent(ref setupData);
	}
	
	WriteProtected<byte>
	(
		/* 0x141534D0 */ ScanSignature    ("boss_giant01_bo1120","xxxxxxxxxxxxxxxxxxx"),
		System.Text.Encoding.UTF8.GetBytes("zev_dragon_sp_laser")
	);
	
	if (LevelInfo.GetCurrentStageID() == "w2t01")
	{	
		bool eventQTELaser = Lua.Call<int>("IsPlayingDiEvent", "bo2141") == 1;
		if (eventQTELaser)
		{	
			var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
			var setupData = new EventPlayer.EventSetupData("zev_dragon_sp_laser");
			setupData.playFlags |= EventPlayer.EventSetupData.PlayFlag.CantSkip;
			evtPlayer->PlayEvent(ref setupData);
		}
	}

	WriteProtected<byte>
	(
		/* 0x14145C238 */ ScanSignature   ("boss_giant03_bo3140", "xxxxxxxxxxxxxxxxxxx"),
		System.Text.Encoding.UTF8.GetBytes("bo3141\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	);
	
	bool eventKnightPhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo3140") == 1;
	if (eventKnightPhase2)
	{
		var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
		var setupData = new EventPlayer.EventSetupData("bo3141");
		evtPlayer->PlayEvent(ref setupData);
	}
	
	if (LevelInfo.GetCurrentStageID() == "w3t01")
	{	
		bool eventQTEKnight2 = Lua.Call<int>("IsPlayingDiEvent", "bo3141") == 1;
		if (eventQTEKnight2)
		{	
			var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
			var setupData = new EventPlayer.EventSetupData("zev_knight_shieldride02_aerial");
			setupData.playFlags |= EventPlayer.EventSetupData.PlayFlag.CantSkip;
			evtPlayer->PlayEvent(ref setupData);
		}
	}
	
	if (LevelInfo.GetCurrentStageID() == "w1r04" || LevelInfo.GetCurrentStageID() == "w1r06")
	{	
		bool eventRiflePhase2 = Lua.Call<int>("IsPlayingDiEvent", "bo4140") == 1;
		if (eventRiflePhase2)
		{
			var evtPlayer = (EventPlayer.Data*)GameManager.GetService("EventPlayer");
			var setupData = new EventPlayer.EventSetupData("bo4141");
			evtPlayer->PlayEvent(ref setupData);
		}
	}
}

Code "Supreme Finale w1r06" by "Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
	static string[] qte_L = new[]
	
	{ /* sup */ "bo4162" };
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
    if (LevelInfo.GetCurrentStageID() == "w1r06")
	{
		if (Address == 0)
		{
			/* 0x1414624B8 */ Address = ScanSignature
			("bo4160", "xxxxxx");
		}
		else
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes(qte_L[new Random().Next(0, qte_L.Length)])); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("bo4160")); }
}

Code "Unskippable Giganto Phase 2 in base Kronos" by "Hypernova"
//
	#lib "GameManager"
	#import "Services"
	#import "GOComponents"
	#import "Graphics"
	#import "Plugins"
	
    static long Address = 0;
	static string[] qte_L = new[]
	
	{ /* sup */ "bo1141" };
//
{
	string currentStage = LevelInfo.GetCurrentStageID();
		
    if (LevelInfo.GetCurrentStageID() == "w1r03")
	{
		if (Address == 0)
		{
			/* 0x1414534E4 */ Address = ScanSignature
			("bo1140", "xxxxxx");
		}
		else
		{ WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes(qte_L[new Random().Next(0, qte_L.Length)])); }
	}
	else { WriteProtected<byte>(Address, System.Text.Encoding.UTF8.GetBytes("bo1140")); }
}

Library "EventPlayer" by "Ashrindy"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "Memory"
    #lib "GameService"
    #lib "Helpers"

    #import "Allocators"
    #import "Collections"

    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;
    using System.Runtime.CompilerServices;

    FUNCTION_PTR(void, fpPlayEvent, 0x140139010, Data* self, EventSetupData* setupData)
    FUNCTION_PTR(void, fpSetupEventSetupData, 0x1401370C0, EventSetupData* self, Helpers.UnmanagedString cutsceneName)

    [StructLayout(LayoutKind.Explicit, Size = 0x160)]
    public struct EventSetupData {
        [Flags]
        public enum PlayFlag : uint {
            UseSetupTransform = 0x01,
            StopFadeOut = 0x02,
            CantSkip = 0x04,
            EnableHUD = 0x20,
            CappedFPS = 0x4000
        }

        [Flags]
        public enum PlayerFlag : uint {
            UsePosition = 0x01,
            UseRotation = 0x02
        }

        [FieldOffset(0)] public fixed byte cutsceneName[40];
        [FieldOffset(0x28)] public fixed byte soundName[40];
        [FieldOffset(0x50)] public Vector3 position;
        [FieldOffset(0x60)] public Quaternion rotation;
        [FieldOffset(0x70)] public Vector3 scale;
        [FieldOffset(0x84)] public float speed;
        [FieldOffset(0x88)] public PlayFlag playFlags;
        [FieldOffset(0x110)] public Vector3 playerPosition;
        [FieldOffset(0x120)] public Quaternion playerRotation;
        [FieldOffset(0x130)] public PlayerFlag playerFlags;

        public void Setup(string cutsceneName){
            fixed(EventSetupData* pThis = &this){
                GET_FUNCTION_PTR(fpSetupEventSetupData)(pThis, new Helpers.UnmanagedString(cutsceneName));
            }
        }

        public EventSetupData(){}

        public EventSetupData(string cutsceneName){
            Setup(cutsceneName);
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct VariableString {
        [FieldOffset(0)] public Helpers.UnmanagedString buffer;
        [FieldOffset(0x8)] public long allocator;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x58)]
    public struct EventSceneManager {
        [FieldOffset(0x38)] public ObjectMoveArray<VariableString> eventNames;

        public bool IsEventPlaying(string name) {
            foreach(var x in eventNames) {
                if(x.buffer.Value == name){
                    return true;
                }
            }
            return false;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x160)]
    public struct Data {
        [FieldOffset(0xD0)] public Memory.Pointer<EventSceneManager> evtSceneMgr;

        public void PlayEvent(ref EventSetupData setupData){
            fixed(EventSetupData* pSetupData = &setupData)
            fixed(Data* pThis = &this){
                GET_FUNCTION_PTR(fpPlayEvent)(pThis, pSetupData);
            }
        }
    }
}
